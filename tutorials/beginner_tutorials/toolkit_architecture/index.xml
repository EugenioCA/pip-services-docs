<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pip.Services Docs â€“ Architecture of the Pip.Services toolkit</title>
    <link>/tutorials/beginner_tutorials/toolkit_architecture/</link>
    <description>Recent content in Architecture of the Pip.Services toolkit on Pip.Services Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/tutorials/beginner_tutorials/toolkit_architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Tutorials: </title>
      <link>/tutorials/beginner_tutorials/toolkit_architecture/__text1_dart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/beginner_tutorials/toolkit_architecture/__text1_dart/</guid>
      <description>
        
        
        &lt;p&gt;The core of the toolkit is shown in green. It consists of two modules, both of which are required:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/dart/commons&#34;&gt;Commons&lt;/a&gt; - Basic primitives for symmetrical development on various programming languages, as well as patterns, that are used in the rest of the modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/dart/components&#34;&gt;Components&lt;/a&gt; - Contains standard components, such as component logging, performance counters, synchronization, configuration, caching, and others. Specific implementations of these components are found in the extension modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main (basic) modules are shown in blue. Although they are not required, they are used in most microservices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/dart/container&#34;&gt;Container&lt;/a&gt; - A basic container, which is used to compose microservices from loosely-coupled components (see &lt;a href=&#34;../microservice_structure&#34;&gt;The Structure of a Microservice&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/dart/data&#34;&gt;Data&lt;/a&gt; - Basic components for storing data and implementing storage of data in memory and in the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/dart/rpc&#34;&gt;RPC&lt;/a&gt; - Basic components for synchronous communication and implementations using local calls and the HTTP/REST protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/dart/messaging&#34;&gt;Messaging&lt;/a&gt; - Basic components for asynchronous communication and implementing local queues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last but not least are the additional (optional) modules, shown in red. These modules are used to support specific technologies, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure - components for working with the Azure cloud&lt;/li&gt;
&lt;li&gt;AWS - components for working with the AWS cloud&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/dart/mongodb&#34;&gt;MongoDB&lt;/a&gt; - components for storing data in MongoDB&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/dart/grpc&#34;&gt;GRPC&lt;/a&gt; - components for synchronous communication via GRPC&lt;/li&gt;
&lt;li&gt;ActiveMQ - components for asynchronous communication via ActiveMQ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/dart/mqtt&#34;&gt;MQTT&lt;/a&gt; - components for asynchronous communication via the MQTT protocol&lt;/li&gt;
&lt;li&gt;Memcached - components for caching and synchronizing with Memcached&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/dart/redis&#34;&gt;Redis&lt;/a&gt; - components for caching and synchronizing with Redis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/dart/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt; - components for logging with ElasticSearch&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/dart/prometheus&#34;&gt;Prometheus&lt;/a&gt; - components for using performance counters with Prometheus&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Tutorials: </title>
      <link>/tutorials/beginner_tutorials/toolkit_architecture/__text1_go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/beginner_tutorials/toolkit_architecture/__text1_go/</guid>
      <description>
        
        
        &lt;p&gt;The core of the toolkit is shown in green. It consists of two modules, both of which are required:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/golang/commons&#34;&gt;Commons&lt;/a&gt; - Basic primitives for symmetrical development on various programming languages, as well as patterns, that are used in the rest of the modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/golang/components&#34;&gt;Components&lt;/a&gt; - Contains standard components, such as component logging, performance counters, synchronization, configuration, caching, and others. Specific implementations of these components are found in the extension modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main (basic) modules are shown in blue. Although they are not required, they are used in most microservices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/golang/container&#34;&gt;Container&lt;/a&gt; - A basic container, which is used to compose microservices from loosely-coupled components (see &lt;a href=&#34;../microservice_structure&#34;&gt;The Structure of a Microservice&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/golang/data&#34;&gt;Data&lt;/a&gt; - Basic components for storing data and implementing storage of data in memory and in the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/golang/rpc&#34;&gt;RPC&lt;/a&gt; - Basic components for synchronous communication and implementations using local calls and the HTTP/REST protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/golang/messaging&#34;&gt;Messaging&lt;/a&gt; - Basic components for asynchronous communication and implementing local queues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last but not least are the additional (optional) modules, shown in red. These modules are used to support specific technologies, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/azure&#34;&gt;Azure&lt;/a&gt; - components for working with the Azure cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/aws&#34;&gt;AWS&lt;/a&gt; - components for working with the AWS cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/azure&#34;&gt;GCP&lt;/a&gt; - components for working with the Goolgle cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/mongodb&#34;&gt;MongoDB&lt;/a&gt; - components for storing data in MongoDB.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/grpc&#34;&gt;GRPC&lt;/a&gt; - components for synchronous communication via GRPC.&lt;/li&gt;
&lt;li&gt;ActiveMQ - components for asynchronous communication via ActiveMQ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/kafka&#34;&gt;Kafka&lt;/a&gt; - a set of components for messaging using the Kafka protocol.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/mqtt&#34;&gt;MQTT&lt;/a&gt; - components for asynchronous communication via the MQTT protocol.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/memcached&#34;&gt;Memcached&lt;/a&gt; - components for caching and synchronizing with Memcached.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/redis&#34;&gt;Redis&lt;/a&gt; - components for caching and synchronizing with Redis.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/rabbitmq&#34;&gt;RabbitMQ&lt;/a&gt; - a set of components for working with the message queue in RabbitMQ through the AMQP protocol.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt; - components for logging with ElasticSearch.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/golang/prometheus&#34;&gt;Prometheus&lt;/a&gt; - components for using performance counters with Prometheus.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Tutorials: </title>
      <link>/tutorials/beginner_tutorials/toolkit_architecture/__text1_net/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/beginner_tutorials/toolkit_architecture/__text1_net/</guid>
      <description>
        
        
        &lt;p&gt;The core of the toolkit is shown in green. It consists of two modules, both of which are required:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/net/commons&#34;&gt;Commons&lt;/a&gt; - Basic primitives for symmetrical development on various programming languages, as well as patterns, that are used in the rest of the modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/net/components&#34;&gt;Components&lt;/a&gt; - Contains standard components, such as component logging, performance counters, synchronization, configuration, caching, and others. Specific implementations of these components are found in the extension modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main (basic) modules are shown in blue. Although they are not required, they are used in most microservices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/net/container&#34;&gt;Container&lt;/a&gt; - A basic container, which is used to compose microservices from loosely-coupled components (see &lt;a href=&#34;../microservice_structure&#34;&gt;The Structure of a Microservice&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/net/data&#34;&gt;Data&lt;/a&gt; - Basic components for storing data and implementing storage of data in memory and in the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/net/rpc&#34;&gt;RPC&lt;/a&gt; - Basic components for synchronous communication and implementations using local calls and the HTTP/REST protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/net/messaging&#34;&gt;Messaging&lt;/a&gt; - Basic components for asynchronous communication and implementing local queues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last but not least are the additional (optional) modules, shown in red. These modules are used to support specific technologies, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure - components for working with the Azure cloud&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/net/aws&#34;&gt;AWS&lt;/a&gt; - components for working with the AWS cloud&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/net/mongodb&#34;&gt;MongoDB&lt;/a&gt; - components for storing data in MongoDB&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/net/grpc&#34;&gt;GRPC&lt;/a&gt; - components for synchronous communication via GRPC&lt;/li&gt;
&lt;li&gt;ActiveMQ - components for asynchronous communication via ActiveMQ&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/net/mqtt&#34;&gt;MQTT&lt;/a&gt; - components for asynchronous communication via the MQTT protocol&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/net/memcached&#34;&gt;Memcached&lt;/a&gt; - components for caching and synchronizing with Memcached&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/net/redis&#34;&gt;Redis&lt;/a&gt; - components for caching and synchronizing with Redis&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/net/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt; - components for logging with ElasticSearch&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/net/prometheus&#34;&gt;Prometheus&lt;/a&gt; - components for using performance counters with Prometheus&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Tutorials: </title>
      <link>/tutorials/beginner_tutorials/toolkit_architecture/__text1_node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/beginner_tutorials/toolkit_architecture/__text1_node/</guid>
      <description>
        
        
        &lt;p&gt;The core of the toolkit is shown in green. It consists of two modules, both of which are required:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/node/commons/&#34;&gt;Commons&lt;/a&gt; - Basic primitives for symmetrical development on various programming languages, as well as patterns, that are used in the rest of the modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/node/components&#34;&gt;Components&lt;/a&gt; - Contains standard components, such as component logging, performance counters, synchronization, configuration, caching, and others. Specific implementations of these components are found in the extension modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main (basic) modules are shown in blue. Although they are not required, they are used in most microservices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/node/container&#34;&gt;Container&lt;/a&gt; - A basic container, which is used to compose microservices from loosely-coupled components (see &lt;a href=&#34;../microservice_structure&#34;&gt;The Structure of a Microservice&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/node/data&#34;&gt;Data&lt;/a&gt; - Basic components for storing data and implementing storage of data in memory and in the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/node/rpc&#34;&gt;RPC&lt;/a&gt; - Basic components for synchronous communication and implementations using local calls and the HTTP/REST protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/node/messaging&#34;&gt;Messaging&lt;/a&gt; - Basic components for asynchronous communication and implementing local queues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last but not least are the additional (optional) modules, shown in red. These modules are used to support specific technologies, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/node/azure&#34;&gt;Azure&lt;/a&gt; - components for working with the Azure cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/node/aws&#34;&gt;AWS&lt;/a&gt; - components for working with the AWS cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/node/azure&#34;&gt;GCP&lt;/a&gt; - components for working with the Goolgle cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/node/mongodb&#34;&gt;MongoDB&lt;/a&gt; - components for storing data in MongoDB.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/node/grpc&#34;&gt;GRPC&lt;/a&gt; - components for synchronous communication via GRPC.&lt;/li&gt;
&lt;li&gt;ActiveMQ - components for asynchronous communication via ActiveMQ.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/node/mqtt&#34;&gt;MQTT&lt;/a&gt; - components for asynchronous communication via the MQTT protocol.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/node/memcached&#34;&gt;Memcached&lt;/a&gt; - components for caching and synchronizing with Memcached.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/node/redis&#34;&gt;Redis&lt;/a&gt; - components for caching and synchronizing with Redis.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/node/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt; - components for logging with ElasticSearch.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/node/prometheus&#34;&gt;Prometheus&lt;/a&gt; - components for using performance counters with Prometheus.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Tutorials: </title>
      <link>/tutorials/beginner_tutorials/toolkit_architecture/__text1_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/beginner_tutorials/toolkit_architecture/__text1_python/</guid>
      <description>
        
        
        &lt;p&gt;The core of the toolkit is shown in green. It consists of two modules, both of which are required:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/python/commons&#34;&gt;Commons&lt;/a&gt; - Basic primitives for symmetrical development on various programming languages, as well as patterns, that are used in the rest of the modules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/python/components&#34;&gt;Components&lt;/a&gt; - Contains standard components, such as component logging, performance counters, synchronization, configuration, caching, and others. Specific implementations of these components are found in the extension modules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main (basic) modules are shown in blue. Although they are not required, they are used in most microservices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/python/container&#34;&gt;Container&lt;/a&gt; - A basic container, which is used to compose microservices from loosely-coupled components (see &lt;a href=&#34;../microservice_structure&#34;&gt;The Structure of a Microservice&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/python/data&#34;&gt;Data&lt;/a&gt; - Basic components for storing data and implementing storage of data in memory and in the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/python/rpc&#34;&gt;RPC&lt;/a&gt; - Basic components for synchronous communication and implementations using local calls and the HTTP/REST protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../../toolkit_api/python/messaging&#34;&gt;Messaging&lt;/a&gt; - Basic components for asynchronous communication and implementing local queues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last but not least are the additional (optional) modules, shown in red. These modules are used to support specific technologies, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/python/azure&#34;&gt;Azure&lt;/a&gt; - components for working with the Azure cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/python/aws&#34;&gt;AWS&lt;/a&gt; - components for working with the AWS cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/python/azure&#34;&gt;GCP&lt;/a&gt; - components for working with the Goolgle cloud.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/python/mongodb&#34;&gt;MongoDB&lt;/a&gt; - components for storing data in MongoDB.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/python/grpc&#34;&gt;GRPC&lt;/a&gt; - components for synchronous communication via GRPC.&lt;/li&gt;
&lt;li&gt;ActiveMQ - components for asynchronous communication via ActiveMQ.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/python/mqtt&#34;&gt;MQTT&lt;/a&gt; - components for asynchronous communication via the MQTT protocol.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/python/memcached&#34;&gt;Memcached&lt;/a&gt; - components for caching and synchronizing with Memcached.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/python/redis&#34;&gt;Redis&lt;/a&gt; - components for caching and synchronizing with Redis.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/python/elasticsearch&#34;&gt;ElasticSearch&lt;/a&gt; - components for logging with ElasticSearch.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../../toolkit_api/python/prometheus&#34;&gt;Prometheus&lt;/a&gt; - components for using performance counters with Prometheus.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
