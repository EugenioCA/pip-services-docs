<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pip.Services Docs â€“ Your First Microservice</title>
    <link>/tutorials/getting_started/your_first_microservice/</link>
    <description>Recent content in Your First Microservice on Pip.Services Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/tutorials/getting_started/your_first_microservice/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Tutorials: </title>
      <link>/tutorials/getting_started/your_first_microservice/__code1_dart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/getting_started/your_first_microservice/__code1_dart/</guid>
      <description>
        
        
        &lt;p&gt;Looking at the configuration file, we can conclude that the following components will be created in the microservice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/dart/components/info/context_info&#34;&gt;ContextInfo&lt;/a&gt; - standard Pip.Services component for determining the name and description of a microservice.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/dart/components/log/console_logger&#34;&gt;ConsoleLogger&lt;/a&gt; - standard Pip.Services component for writing logs to stdout,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/dart/components/count/log_counters&#34;&gt;LogCounters&lt;/a&gt; - standard Pip.Services component for logging performance counters.&lt;/li&gt;
&lt;li&gt;HelloWorldController - the controller of our microservice, implemented in step 2. Make note of the controller&amp;rsquo;s descriptor, as it will be used to link the controller class to the REST service.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/dart/rpc/services/http_endpoint&#34;&gt;HttpEndpoint&lt;/a&gt; - standard Pip.Services component that allows multiple services to use a single HTTP port simultaneously.&lt;/li&gt;
&lt;li&gt;HelloWorldRestServices - the REST service we implemented on step 3.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/dart/rpc/services/heartbeat_rest_service&#34;&gt;HeartbeatRestService&lt;/a&gt; - standard Pip.Services component that is used to check whether or not a microservice is still up and running by calling GET /heartbeat.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/dart/rpc/services/status_rest_service/&#34;&gt;StatusRestService&lt;/a&gt; - standard Pip.Services component for getting the status of a microservice by calling GET /status.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Tutorials: </title>
      <link>/tutorials/getting_started/your_first_microservice/__code1_go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/getting_started/your_first_microservice/__code1_go/</guid>
      <description>
        
        
        &lt;p&gt;Looking at the configuration file, we can conclude that the following components will be created in the microservice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/golang/components/info/context_info&#34;&gt;ContextInfo&lt;/a&gt; - standard Pip.Services component for determining the name and description of a microservice.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/golang/components/log/console_logger&#34;&gt;ConsoleLogger&lt;/a&gt; - standard Pip.Services component for writing logs to stdout,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/golang/components/count/log_counters&#34;&gt;LogCounters&lt;/a&gt; - standard Pip.Services component for logging performance counters.&lt;/li&gt;
&lt;li&gt;HelloWorldController - the controller of our microservice, implemented in step 2. Make note of the controller&amp;rsquo;s descriptor, as it will be used to link the controller class to the REST service.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/golang/rpc/services/http_endpoint&#34;&gt;HttpEndpoint&lt;/a&gt; - standard Pip.Services component that allows multiple services to use a single HTTP port simultaneously.&lt;/li&gt;
&lt;li&gt;HelloWorldRestServices - the REST service we implemented on step 3.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/golang/rpc/services/heartbeat_rest_service&#34;&gt;HeartbeatRestService&lt;/a&gt; - standard Pip.Services component that is used to check whether or not a microservice is still up and running by calling GET /heartbeat.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/golang/rpc/services/status_rest_service/&#34;&gt;StatusRestService&lt;/a&gt; - standard Pip.Services component for getting the status of a microservice by calling GET /status.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Tutorials: </title>
      <link>/tutorials/getting_started/your_first_microservice/__code1_net/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/getting_started/your_first_microservice/__code1_net/</guid>
      <description>
        
        
        &lt;p&gt;Looking at the configuration file, we can conclude that the following components will be created in the microservice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/net/components/info/context_info&#34;&gt;ContextInfo&lt;/a&gt; - standard Pip.Services component for determining the name and description of a microservice.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/net/components/log/console_logger&#34;&gt;ConsoleLogger&lt;/a&gt; - standard Pip.Services component for writing logs to stdout,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/net/components/count/log_counters&#34;&gt;LogCounters&lt;/a&gt; - standard Pip.Services component for logging performance counters.&lt;/li&gt;
&lt;li&gt;HelloWorldController - the controller of our microservice, implemented in step 2. Make note of the controller&amp;rsquo;s descriptor, as it will be used to link the controller class to the REST service.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/net/rpc/services/http_endpoint&#34;&gt;HttpEndpoint&lt;/a&gt; - standard Pip.Services component that allows multiple services to use a single HTTP port simultaneously.&lt;/li&gt;
&lt;li&gt;HelloWorldRestServices - the REST service we implemented on step 3.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/net/rpc/services/heartbeat_rest_service&#34;&gt;HeartbeatRestService&lt;/a&gt; - standard Pip.Services component that is used to check whether or not a microservice is still up and running by calling GET /heartbeat.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/net/rpc/services/status_rest_service/&#34;&gt;StatusRestService&lt;/a&gt; - standard Pip.Services component for getting the status of a microservice by calling GET /status.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Tutorials: </title>
      <link>/tutorials/getting_started/your_first_microservice/__code1_node/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/getting_started/your_first_microservice/__code1_node/</guid>
      <description>
        
        
        &lt;p&gt;Looking at the configuration file, we can conclude that the following components will be created in the microservice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/node/components/info/context_info&#34;&gt;ContextInfo&lt;/a&gt; - standard Pip.Services component for determining the name and description of a microservice.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/node/components/log/console_logger&#34;&gt;ConsoleLogger&lt;/a&gt; - standard Pip.Services component for writing logs to stdout,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/node/components/count/log_counters&#34;&gt;LogCounters&lt;/a&gt; - standard Pip.Services component for logging performance counters.&lt;/li&gt;
&lt;li&gt;HelloWorldController - the controller of our microservice, implemented in step 2. Make note of the controller&amp;rsquo;s descriptor, as it will be used to link the controller class to the REST service.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/node/rpc/services/http_endpoint&#34;&gt;HttpEndpoint&lt;/a&gt; - standard Pip.Services component that allows multiple services to use a single HTTP port simultaneously.&lt;/li&gt;
&lt;li&gt;HelloWorldRestServices - the REST service we implemented on step 3.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/node/rpc/services/heartbeat_rest_service&#34;&gt;HeartbeatRestService&lt;/a&gt; - standard Pip.Services component that is used to check whether or not a microservice is still up and running by calling GET /heartbeat.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/node/rpc/services/status_rest_service/&#34;&gt;StatusRestService&lt;/a&gt; - standard Pip.Services component for getting the status of a microservice by calling GET /status.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Tutorials: </title>
      <link>/tutorials/getting_started/your_first_microservice/__code1_python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/getting_started/your_first_microservice/__code1_python/</guid>
      <description>
        
        
        &lt;p&gt;Looking at the configuration file, we can conclude that the following components will be created in the microservice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/python/components/info/context_info&#34;&gt;ContextInfo&lt;/a&gt; - standard Pip.Services component for determining the name and description of a microservice.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/python/components/log/console_logger&#34;&gt;ConsoleLogger&lt;/a&gt; - standard Pip.Services component for writing logs to stdout,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/python/components/count/log_counters&#34;&gt;LogCounters&lt;/a&gt; - standard Pip.Services component for logging performance counters.&lt;/li&gt;
&lt;li&gt;HelloWorldController - the controller of our microservice, implemented in step 2. Make note of the controller&amp;rsquo;s descriptor, as it will be used to link the controller class to the REST service.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/python/rpc/services/http_endpoint&#34;&gt;HttpEndpoint&lt;/a&gt; - standard Pip.Services component that allows multiple services to use a single HTTP port simultaneously.&lt;/li&gt;
&lt;li&gt;HelloWorldRestServices - the REST service we implemented on step 3.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/python/rpc/services/heartbeat_rest_service&#34;&gt;HeartbeatRestService&lt;/a&gt; - standard Pip.Services component that is used to check whether or not a microservice is still up and running by calling GET /heartbeat.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../toolkit_api/python/rpc/services/status_rest_service/&#34;&gt;StatusRestService&lt;/a&gt; - standard Pip.Services component for getting the status of a microservice by calling GET /status.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
